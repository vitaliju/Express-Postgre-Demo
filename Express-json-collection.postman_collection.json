{
	"info": {
		"_postman_id": "e5dc36b4-accd-45f0-84b1-d243816839b6",
		"name": "Express-json-collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38004015"
	},
	"item": [
		{
			"name": "Create Actor functionality",
			"item": [
				{
					"name": "Cannot create actor which has future birth date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if 400 is returned\r",
									"pm.test(\"Return 400\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(400);\r",
									"});\r",
									"// Check if string \"Date of birth cannot be in the future.\" is returned\r",
									"pm.test(\"Returns correct text\", () => {\r",
									"    const responseJson = pm.response.json()\r",
									"    pm.expect(responseJson.message).to.eq(\"Date of birth cannot be in the future.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Glen\",\r\n    \"lastName\": \"Jhonson\",\r\n    \"dateOfBirth\": \"2026-02-06\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/actors",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Actor Successfull call",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"const requestBody = pm.request.body.raw;\r",
									"const requestJson = JSON.parse(requestBody);\r",
									"\r",
									"pm.collectionVariables.set(\"actorId\", responseJson.id);\r",
									"pm.collectionVariables.set(\"actorFirstName\", requestJson.firstName);\r",
									"pm.collectionVariables.set(\"actorLastName\", requestJson.lastName);\r",
									"\r",
									"// Status code is 201\r",
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(201);\r",
									"});\r",
									"\r",
									"// Check that first_name, last_name  match \r",
									"pm.test(\"First and last names matches input\", () => {\r",
									"    pm.expect(responseJson.id).to.be.a('number').and.be.above(0);\r",
									"    pm.expect(responseJson.first_name).to.eq(requestJson.firstName);\r",
									"    pm.expect(responseJson.last_name).to.eq(requestJson.lastName);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1s\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Tom\",\r\n    \"lastName\": \"Cruse\",\r\n    \"dateOfBirth\": \"1984-03-06\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/actors/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actors",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check created actor exists in get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"// Status is 200\r",
									"pm.test(\"Response status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Check that first_name, last_name match\r",
									"pm.test(\"First and last names matches input\", () => {\r",
									"    pm.expect(responseJson.id).to.be.a('number').and.to.be.above(0);\r",
									"\r",
									"    const firstName = pm.collectionVariables.get(\"actorFirstName\");\r",
									"    const lastName = pm.collectionVariables.get(\"actorLastName\");\r",
									"    pm.expect(responseJson.first_name).to.eq(firstName);\r",
									"    pm.expect(responseJson.last_name).to.eq(lastName);\r",
									"   \r",
									"});\r",
									"\r",
									"// date_of_birth and created_at are present and not empty\r",
									"pm.test(\"date_of_birth and created_at are present and not empty\", () => {\r",
									"    pm.expect(responseJson).to.have.property('date_of_birth').that.is.not.empty;\r",
									"    pm.expect(responseJson).to.have.property('created_at').that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1s\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/actors/{{actorId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actors",
								"{{actorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check created actor exists in get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Status is 200\r",
									"pm.test(\"Response status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// The array contains first_name and last_name and actor_id \r",
									"pm.test(\"Check if array contains first_name and last_name and actor_id\", () => {\r",
									"    const actorId = pm.collectionVariables.get(\"actorId\");\r",
									"    const firstName = pm.collectionVariables.get(\"actorFirstName\");\r",
									"    const lastName = pm.collectionVariables.get(\"actorLastName\");\r",
									"\r",
									"    const jsonData = pm.response.json();\r",
									"    const found = jsonData.some(function (item) {\r",
									"        return item.first_name === firstName && item.last_name === lastName && item.id == actorId;\r",
									"    });\r",
									"    pm.expect(found).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1s\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/actors/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actors",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete Actor Functionality",
			"item": [
				{
					"name": "Cannot delete actor which does not exists return 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Returned status code 404\r",
									"pm.test(\"Response status code is 404\", () => {\r",
									"  pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"// Check if a string \"Actor not found.\" is returned\r",
									"pm.test(\"Verify that the message is correct\", () => {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.eq(\"Actor not found.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1s\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/actors/100",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actors",
								"100"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Actor for further delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"const requestBody = pm.request.body.raw;\r",
									"const requestJson = JSON.parse(requestBody);\r",
									"\r",
									"pm.collectionVariables.set(\"actorId\", responseJson.id);\r",
									"pm.collectionVariables.set(\"actorFirstName\", requestJson.firstName);\r",
									"pm.collectionVariables.set(\"actorLastName\", requestJson.lastName);\r",
									"\r",
									"// Status code is 201\r",
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(201);\r",
									"});\r",
									"\r",
									"// Check that first_name, last_name match\r",
									"pm.test(\"First and last names matches input\", () => {\r",
									"    pm.expect(responseJson.id).to.be.a('number').and.be.above(0);\r",
									"    pm.expect(responseJson.first_name).to.eq(requestJson.firstName);\r",
									"    pm.expect(responseJson.last_name).to.eq(requestJson.lastName);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1s\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Tom\",\r\n    \"lastName\": \"Ford\",\r\n    \"dateOfBirth\": \"1955-03-06\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/actors/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actors",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleting actor which does exists return 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// We get 204\r",
									"pm.test(\"Return 204\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1s\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/actors/{{actorId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actors",
								"{{actorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check deleted actor does not exists in get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// We get status code 404\r",
									"pm.test(\"Status code 404 is returned\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(404);\r",
									"});\r",
									"\r",
									"// Check if string \"Actor not found.\" is returned\r",
									"pm.test(\"Verify that message is correct\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message).to.eq(\"Actor not found.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1s\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/actors/{{actorId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actors",
								"{{actorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check deleted actor does not exists in get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Status code is 200\r",
									"pm.test(\"Response status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Check that deleted actor does not exists in get all\r",
									"pm.test(\"Deleted actors should not be present in the response\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    responseJson.forEach(function(actor) {\r",
									"        pm.expect(actor.deleted).to.not.exist;\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1s\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/actors",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actors"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update Actor Functionality",
			"item": [
				{
					"name": "Cannot update actor which does not exists return 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Returned status code 404\r",
									"pm.test(\"Response status code is 404\", () => {\r",
									"  pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"// Check if a string \"Actor not found.\" is returned\r",
									"pm.test(\"Verify that the message is correct\", () => {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.message).to.eq(\"Actor not found.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1s\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/actors/100",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actors",
								"100"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Actor for further update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"const requestBody = pm.request.body.raw;\r",
									"const requestJson = JSON.parse(requestBody);\r",
									"\r",
									"pm.collectionVariables.set(\"actorId\", responseJson.id);\r",
									"\r",
									"// Status code is 201\r",
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(201);\r",
									"});\r",
									"\r",
									"// Check that first_name, last_name match\r",
									"pm.test(\"First and last names matches input\", () => {\r",
									"    pm.expect(responseJson.id).to.be.a('number').and.be.above(0);\r",
									"    pm.expect(responseJson.first_name).to.eq(requestJson.firstName);\r",
									"    pm.expect(responseJson.last_name).to.eq(requestJson.lastName);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1s\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Jhon\",\r\n    \"lastName\": \"Doe\",\r\n    \"dateOfBirth\": \"1994-03-06\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/actors",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Updating actor which does exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"const requestBody = pm.request.body.raw;\r",
									"const requestJson = JSON.parse(requestBody);\r",
									"\r",
									"pm.collectionVariables.set(\"actorFirstName\", requestJson.firstName);\r",
									"pm.collectionVariables.set(\"actorLastName\", requestJson.lastName);\r",
									"\r",
									"// Status code is 200\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(200);\r",
									"});\r",
									"\r",
									"// Check that first_name, last_name match\r",
									"pm.test(\"First and last names matches input\", () => {\r",
									"    const actorId = pm.collectionVariables.get('actorId');\r",
									"    pm.expect(responseJson.id).to.eq(actorId);\r",
									"    pm.expect(responseJson.first_name).to.eq(requestJson.firstName);\r",
									"    pm.expect(responseJson.last_name).to.eq(requestJson.lastName);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1s\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Jhon\",\r\n    \"lastName\": \"Donovan\",\r\n    \"dateOfBirth\": \"1994-03-06\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/actors/{{actorId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actors",
								"{{actorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check updated actor in get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"// Status is 200\r",
									"pm.test(\"Response status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Check that first_name, last_name match\r",
									"pm.test(\"First and last names match update info\", () => {\r",
									"    const firstName = pm.collectionVariables.get(\"actorFirstName\");\r",
									"    const lastName = pm.collectionVariables.get(\"actorLastName\");\r",
									"\r",
									"    pm.expect(responseJson.id).to.be.a('number').and.to.be.above(0);\r",
									"    pm.expect(responseJson.first_name).to.eq(firstName);\r",
									"    pm.expect(responseJson.last_name).to.eq(lastName);\r",
									"});\r",
									"\r",
									"// date_of_birth and created_at are present and not empty\r",
									"pm.test(\"date_of_birth and created_at are present and not empty\", () => {\r",
									"    pm.expect(responseJson).to.have.property('date_of_birth').that.is.not.empty;\r",
									"    pm.expect(responseJson).to.have.property('created_at').that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1s\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/actors/{{actorId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actors",
								"{{actorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check updated actor in get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Status is 200\r",
									"pm.test(\"Response status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// The array contains first_name 'Jhon' and last_name 'Donovan'\r",
									"pm.test(\"Check if array contains first_name 'Jhon' and last_name 'Donovan'\", () => {\r",
									"    const actorId = pm.collectionVariables.get(\"actorId\");\r",
									"    const firstName = pm.collectionVariables.get(\"actorFirstName\");\r",
									"    const lastName = pm.collectionVariables.get(\"actorLastName\");\r",
									"\r",
									"    const jsonData = pm.response.json();\r",
									"    const found = jsonData.some(function (item) {\r",
									"        return item.first_name === firstName && item.last_name === lastName && item.id == actorId;\r",
									"    });\r",
									"    pm.expect(found).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1s\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/actors",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actors"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Movie Functionality",
			"item": [
				{
					"name": "Create actor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"const requestBody = pm.request.body.raw;\r",
									"const requestJson = JSON.parse(requestBody);\r",
									"\r",
									"pm.collectionVariables.set(\"actorId\", responseJson.id);\r",
									"pm.collectionVariables.set(\"actorFirstName\", requestJson.firstName);\r",
									"pm.collectionVariables.set(\"actorLastName\", requestJson.lastName);\r",
									"\r",
									"// Status code is 201\r",
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(201);\r",
									"});\r",
									"\r",
									"// Check that first_name, last_name  match \r",
									"pm.test(\"First and last names matches input\", () => {\r",
									"    pm.expect(responseJson.id).to.be.a('number').and.be.above(0);\r",
									"    pm.expect(responseJson.first_name).to.eq(requestJson.firstName);\r",
									"    pm.expect(responseJson.last_name).to.eq(requestJson.lastName);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1s\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Tony\",\r\n    \"lastName\": \"Jaa\",\r\n    \"dateOfBirth\": \"1984-03-06\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/actors/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actors",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create movie successfull call",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const requestBody = pm.request.body.raw;\r",
									"const requestJson = JSON.parse(requestBody);\r",
									"\r",
									"pm.collectionVariables.set(\"movieId\", responseJson.id);\r",
									"pm.collectionVariables.set(\"movieTitle\", requestJson.title);\r",
									"pm.collectionVariables.set(\"actorId\", requestJson.id);\r",
									"\r",
									"// We get 201\r",
									"pm.test(\"Return 201\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(201);\r",
									"});\r",
									"\r",
									"// Check that title and actorid are correct \r",
									"pm.test(\"Title and actorid match input\", () => {\r",
									"    pm.expect(responseJson.id).to.be.a('number').and.be.above(0);\r",
									"    pm.expect(responseJson.title).to.eq(requestJson.title);\r",
									"    pm.expect(responseJson.actorid).to.eq(requestJson.id);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1s\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Over top\",\r\n    \"creationDate\": \"1991-10-09\",\r\n    \"actorId\": {{actorId}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/movies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check created movie exists in get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"// We get 200\r",
									"pm.test(\"Return 200\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(200);\r",
									"});\r",
									"\r",
									"// Check that title, actor first_name and last_name matches input \r",
									"pm.test(\"Title, actor first and last names match input\", () => {\r",
									"    const movieTitle = pm.collectionVariables.get(\"movieTitle\");\r",
									"    const firstName = pm.collectionVariables.get(\"actorFirstName\");\r",
									"    const lastName = pm.collectionVariables.get(\"actorLastName\");\r",
									"\r",
									"    pm.expect(responseJson.first_name).to.eq(firstName);\r",
									"    pm.expect(responseJson.last_name).to.eq(lastName);\r",
									"    pm.expect(responseJson.title).to.eq(movieTitle);\r",
									"});\r",
									"\r",
									"// Creation_date are present and not empty\r",
									"pm.test(\"Creation_date are present and not empty\", () => {\r",
									"     pm.expect(responseJson).to.have.property('creation_date').that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1s\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/movies/{{movieId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movies",
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check created movie exists in get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Status is 200\r",
									"pm.test(\"Response status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// The array contains movie_id, title, first_name and last_name \r",
									"pm.test(\"Check if array contains movie_id, title, first_name and last_name\", () => {\r",
									"    const movieId = pm.collectionVariables.get(\"movieId\");\r",
									"    const movieTitle = pm.collectionVariables.get(\"movieTitle\");\r",
									"    const firstName = pm.collectionVariables.get(\"actorFirstName\");\r",
									"    const lastName = pm.collectionVariables.get(\"actorLastName\");\r",
									"\r",
									"    const jsonData = pm.response.json();\r",
									"    const found = jsonData.some(function (item) {\r",
									"        return item.id === movieId && item.title === movieTitle \r",
									"         && item.first_name === firstName \r",
									"         && item.last_name === lastName \r",
									"    });\r",
									"    pm.expect(found).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1s\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/movies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cannot create movie without an associated actor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Status code is 404\r",
									"pm.test(\"Status code 404 is returned\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(404);\r",
									"});\r",
									"\r",
									"// Check if a string \"Actor not found.\" is correct\r",
									"pm.test(\"Returns correct message\", () => {\r",
									"    const responseJson = pm.response.json()\r",
									"    pm.expect(responseJson.message).to.eq(\"Actor not found.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Running man\",\r\n    \"creationDate\": \"1981-05-23\",\r\n    \"actorId\": 50\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/movies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movies"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete Movie Functionality",
			"item": [
				{
					"name": "Cannot delete movie which does not exists return 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// We get 404\r",
									"pm.test(\"Return 404\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(404);\r",
									"});\r",
									"\r",
									"// We get a string \"Movie not found.\"\r",
									"pm.test(\"Returns correct text\", () => {\r",
									"    const responseJson = pm.response.json()\r",
									"    pm.expect(responseJson.message).to.eq(\"Movie not found.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/movies/100",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movies",
								"100"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create movie for further delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const requestBody = pm.request.body.raw;\r",
									"const requestJson = JSON.parse(requestBody);\r",
									"\r",
									"pm.collectionVariables.set(\"movieId\", responseJson.id);\r",
									"pm.collectionVariables.set(\"movieTitle\", requestJson.title);\r",
									"pm.collectionVariables.set(\"actorId\", requestJson.id);\r",
									"\r",
									"// We get 201\r",
									"pm.test(\"Return 201\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(201);\r",
									"});\r",
									"\r",
									"// Check that title and actorid are correct \r",
									"pm.test(\"Title and actorid match input\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.id).to.be.a('number').and.be.above(0);\r",
									"    pm.expect(responseJson.title).to.eq(requestJson.title);\r",
									"    pm.expect(responseJson.actorid).to.eq(requestJson.id);\r",
									"   \r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1s\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Thunder cat\",\r\n    \"creationDate\": \"1981-10-09\",\r\n    \"actorId\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/movies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete movie which does exists return 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// We get 204\r",
									"pm.test(\"Return 204\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(204);\r",
									"});\r",
									" \r",
									"pm.test(\"Response time is less than 1s\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"}); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/movies/{{movieId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movies",
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check deleted movie does not exists in get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// We get 404\r",
									"pm.test(\"Return 404\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(404);\r",
									"});\r",
									"\r",
									"// We get a string \"Movie not found\"\r",
									"pm.test(\"Returns correct text\", () => {\r",
									"    const responseJson = pm.response.json()\r",
									"    pm.expect(responseJson.message).to.eq(\"Movie not found.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1s\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/movies/{{movieId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movies",
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check deleted movie does not exists in get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Status code is 200\r",
									"pm.test(\"Response status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Check that deleted movie does not exists in get all\r",
									"pm.test(\"Deleted movie should not be present in the response\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    responseJson.forEach(function(movie) {\r",
									"        pm.expect(movie.deleted).to.not.exist;\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1s\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/movies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movies"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update Movie Functionality",
			"item": [
				{
					"name": "Cannot update movie which does not exists return 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// We get 404\r",
									"pm.test(\"Return 404\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(404);\r",
									"});\r",
									"\r",
									"// We get a string \"Movie not found\"\r",
									"pm.test(\"Returns correct text\", () => {\r",
									"    const responseJson = pm.response.json()\r",
									"    pm.expect(responseJson.message).to.eq(\"Movie not found.\")\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/movies/100",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movies",
								"100"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create actor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"const requestBody = pm.request.body.raw;\r",
									"const requestJson = JSON.parse(requestBody);\r",
									"\r",
									"pm.collectionVariables.set(\"actorId\", responseJson.id);\r",
									"pm.collectionVariables.set(\"actorFirstName\", requestJson.firstName);\r",
									"pm.collectionVariables.set(\"actorLastName\", requestJson.lastName);\r",
									"\r",
									"// Status code is 201\r",
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(201);\r",
									"});\r",
									"\r",
									"// Check that first_name, last_name  match \r",
									"pm.test(\"First and last names matches input\", () => {\r",
									"    pm.expect(responseJson.id).to.be.a('number').and.be.above(0);\r",
									"    pm.expect(responseJson.first_name).to.eq(requestJson.firstName);\r",
									"    pm.expect(responseJson.last_name).to.eq(requestJson.lastName);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1s\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Jet\",\r\n    \"lastName\": \"Lee\",\r\n    \"dateOfBirth\": \"1984-03-06\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/actors/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actors",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create movie for further update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"const requestBody = pm.request.body.raw;\r",
									"const requestJson = JSON.parse(requestBody);\r",
									"\r",
									"pm.collectionVariables.set(\"movieId\", responseJson.id);\r",
									"\r",
									"// Status code is 201\r",
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(201);\r",
									"});\r",
									"\r",
									"// Check that movieTitle match input\r",
									"pm.test(\"Movie title match input\", () => {\r",
									"    pm.expect(responseJson.id).to.be.a('number').and.be.above(0);\r",
									"    pm.expect(responseJson.title).to.eq(requestJson.title);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1s\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Angel city\",\r\n    \"creationDate\": \"1991-10-09\",\r\n    \"actorId\": {{actorId}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/movies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Updating movie which does exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const requestBody = pm.request.body.raw;\r",
									"const requestJson = JSON.parse(requestBody);\r",
									"\r",
									"pm.collectionVariables.set(\"movieTitle\", requestJson.title);\r",
									"\r",
									"// We get 200\r",
									"pm.test(\"Return 200\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(200);\r",
									"});\r",
									"\r",
									"// Check that title and movie_id match input \r",
									"pm.test(\"Title and movieId match input\", () => {\r",
									"    const movieId = pm.collectionVariables.get(\"movieId\");\r",
									"    pm.expect(responseJson.id).to.eq(movieId);\r",
									"    pm.expect(responseJson.title).to.eq(requestJson.title);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1s\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Angel city update\",\r\n    \"creationDate\": \"1991-10-09\",\r\n    \"actorId\": {{actorId}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/movies/{{movieId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movies",
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check updated movie exists in get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// We get 200\r",
									"pm.test(\"Return 200\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(200);\r",
									"});\r",
									"\r",
									"// Check that title, actor first_name and last_name matches input \r",
									"pm.test(\"Title, actor first and last names match input\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const movieTitle = pm.collectionVariables.get(\"movieTitle\");\r",
									"    const firstName = pm.collectionVariables.get(\"actorFirstName\");\r",
									"    const lastName = pm.collectionVariables.get(\"actorLastName\");\r",
									"\r",
									"    pm.expect(responseJson.first_name).to.eq(firstName);\r",
									"    pm.expect(responseJson.last_name).to.eq(lastName);\r",
									"    pm.expect(responseJson.title).to.eq(movieTitle);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1s\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/movies/{{movieId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movies",
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check updated movie exists in get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Status is 200\r",
									"pm.test(\"Response status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// The array contains movie_id, title, first_name and last_name \r",
									"pm.test(\"Check if array contains movie_id, title, first_name and last_name\", () => {\r",
									"    const movieId = pm.collectionVariables.get(\"movieId\");\r",
									"    const movieTitle = pm.collectionVariables.get(\"movieTitle\");\r",
									"    const firstName = pm.collectionVariables.get(\"actorFirstName\");\r",
									"    const lastName = pm.collectionVariables.get(\"actorLastName\");\r",
									"\r",
									"    const jsonData = pm.response.json();\r",
									"    const found = jsonData.some(function (item) {\r",
									"        return item.id === movieId && item.title === movieTitle \r",
									"         && item.first_name === firstName \r",
									"         && item.last_name === lastName \r",
									"    });\r",
									"    pm.expect(found).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1s\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/movies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movies"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Check actor which does not exists in get by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Returned status code 404\r",
							"pm.test(\"Response status code is 404\", () => {\r",
							"  pm.expect(pm.response.code).to.equal(404);\r",
							"});\r",
							"\r",
							"// Check if a string \"Actor not found.\" is returned\r",
							"pm.test(\"Verify that the message is correct\", () => {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.message).to.eq(\"Actor not found.\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/actors/1000",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"actors",
						"1000"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check movie which does not exists in get by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// We get 404\r",
							"pm.test(\"Return 404\", () => {\r",
							"    pm.expect(pm.response.code).to.eq(404);\r",
							"});\r",
							"\r",
							"// We get a string \"Movie not found.\"\r",
							"pm.test(\"Returns correct text\", () => {\r",
							"    const responseJson = pm.response.json()\r",
							"    pm.expect(responseJson.message).to.eq(\"Movie not found.\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/movies/1000",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"movies",
						"1000"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "actorId",
			"value": ""
		},
		{
			"key": "actorFirstName",
			"value": ""
		},
		{
			"key": "actorLastName",
			"value": ""
		},
		{
			"key": "movieId",
			"value": ""
		},
		{
			"key": "movieTitle",
			"value": ""
		}
	]
}