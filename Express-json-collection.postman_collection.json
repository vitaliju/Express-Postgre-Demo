{
	"info": {
		"_postman_id": "e5dc36b4-accd-45f0-84b1-d243816839b6",
		"name": "Express-json-collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38004015"
	},
	"item": [
		{
			"name": "Create Actor functionality",
			"item": [
				{
					"name": "Cannot create actor which has future birth date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// We get 400\r",
									"pm.test(\"Return 400\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(400)\r",
									"})\r",
									"\r",
									"// We get a string \"Date of birth cannot be in the future.\"\r",
									"pm.test(\"Returns correct text\", () => {\r",
									"    const responseJson = pm.response.json()\r",
									"    pm.expect(responseJson.message).to.eq(\"Date of birth cannot be in the future.\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Glen\",\r\n    \"lastName\": \"Jhonson\",\r\n    \"dateOfBirth\": \"2026-02-06\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/actors",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Actor Successfull call",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"actorId\", responseJson.id);\r",
									"\r",
									"// We get 201\r",
									"pm.test(\"Return 201\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(201)\r",
									"});\r",
									"\r",
									"// Check that firstname is Scarlett, lastname is Johansson \r",
									"pm.test(\"Check that first and last names are correct\", () => {\r",
									"    const responseObject = pm.response.json();\r",
									"\r",
									"    pm.expect(responseObject).to.be.an('object');\r",
									"    pm.expect(responseObject.firstname).to.eq(\"Scarlett\");\r",
									"    pm.expect(responseObject.lastname).to.eq(\"Johansson\");\r",
									"   \r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Scarlett\",\r\n    \"lastName\": \"Johansson\",\r\n    \"dateOfBirth\": \"1984-03-06\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/actors/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actors",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check created actor exists in get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// We get 200\r",
									"pm.test(\"Return 200\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(200)\r",
									"});\r",
									"\r",
									"// Check that firstname is Jhon, lastname is Doe \r",
									"pm.test(\"Check that first and last names are correct\", () => {\r",
									"    const responseObject = pm.response.json();\r",
									"\r",
									"    pm.expect(responseObject).to.be.an('object');\r",
									"    pm.expect(responseObject.firstname).to.eq(\"Jhon\");\r",
									"    pm.expect(responseObject.lastname).to.eq(\"Doe\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/actors/{{actorId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actors",
								"{{actorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check created actor exists in get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// We get 200\r",
									"pm.test(\"Return 200\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/actors/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actors",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete Functionality",
			"item": [
				{
					"name": "Cannot delete actor which does not exists return 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// We get 404\r",
									"pm.test(\"Return 404\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(404)\r",
									"})\r",
									"\r",
									"// We get a string \"Date of birth cannot be in the future.\"\r",
									"pm.test(\"Returns correct text\", () => {\r",
									"    const responseJson = pm.response.json()\r",
									"    pm.expect(responseJson.message).to.eq(\"Actor not found.\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/actors/100",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actors",
								"100"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Actor for further delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"actorId\", responseJson.id);\r",
									"\r",
									"// We get 201\r",
									"pm.test(\"Return 201\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(201)\r",
									"});\r",
									"\r",
									"// Check that firstname is Tom, lastname is Ford \r",
									"pm.test(\"Check that first and last names are correct\", () => {\r",
									"    const responseObject = pm.response.json();\r",
									"\r",
									"    pm.expect(responseObject).to.be.an('object');\r",
									"    pm.expect(responseObject.firstname).to.eq(\"Tom\");\r",
									"    pm.expect(responseObject.lastname).to.eq(\"Ford\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Tom\",\r\n    \"lastName\": \"Ford\",\r\n    \"dateOfBirth\": \"1955-03-06\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/actors/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actors",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleting actor which does exists return 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// We get 204\r",
									"pm.test(\"Return 204\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(204);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 32,\r\n    \"firstname\": \"Tom\",\r\n    \"lastname\": \"Ford\",\r\n    \"dateofbirth\": \"1955-03-05T21:00:00.000Z\",\r\n    \"created_at\": \"2024-09-13T12:25:42.244Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/actors/32",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actors",
								"32"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check deleted actor does not exists in get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// We get 404\r",
									"pm.test(\"Return 404\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(404);\r",
									"});\r",
									"\r",
									"// We get a string \"Actor not found.\"\r",
									"pm.test(\"Returns correct text\", () => {\r",
									"    const responseJson = pm.response.json()\r",
									"    pm.expect(responseJson.message).to.eq(\"Actor not found.\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/actors/32",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actors",
								"32"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check deleted actor does not exists in get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// We get 200\r",
									"pm.test(\"Return 200\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/actors",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actors"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update Actor Functionality",
			"item": [
				{
					"name": "Cannot update actor which does not exists return 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// We get 404\r",
									"pm.test(\"Return 404\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(404)\r",
									"})\r",
									"\r",
									"// We get a string \"Date of birth cannot be in the future.\"\r",
									"pm.test(\"Returns correct text\", () => {\r",
									"    const responseJson = pm.response.json()\r",
									"    pm.expect(responseJson.message).to.eq(\"Actor not found.\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/actors/100",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actors",
								"100"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Actor for further update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"actorId\", responseJson.id);\r",
									"\r",
									"// We get 201\r",
									"pm.test(\"Return 201\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(201)\r",
									"});\r",
									"\r",
									"// Check that firstname is Jhon, lastname is Doe \r",
									"pm.test(\"Check that first and last names are correct\", () => {\r",
									"    const responseObject = pm.response.json();\r",
									"\r",
									"    pm.expect(responseObject).to.be.an('object');\r",
									"    pm.expect(responseObject.firstname).to.eq(\"Jhon\");\r",
									"    pm.expect(responseObject.lastname).to.eq(\"Doe\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Jhon\",\r\n    \"lastName\": \"Doe\",\r\n    \"dateOfBirth\": \"1994-03-06\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/actors",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Updating actor which does exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// We get 200\r",
									"pm.test(\"Return 200\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(200)\r",
									"});\r",
									"\r",
									"// Check that firstname is Jhon, lastname is Donovan \r",
									"pm.test(\"Check that first and last names are correct\", () => {\r",
									"    const responseObject = pm.response.json();\r",
									"\r",
									"    pm.expect(responseObject).to.be.an('object');\r",
									"    pm.expect(responseObject.firstname).to.eq(\"Jhon\");\r",
									"    pm.expect(responseObject.lastname).to.eq(\"Donovan\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Jhon\",\r\n    \"lastName\": \"Donovan\",\r\n    \"dateOfBirth\": \"1994-03-06\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/actors/36",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actors",
								"36"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check updated actor exists in get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// We get 200\r",
									"pm.test(\"Return 200\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(200)\r",
									"});\r",
									"\r",
									"// Check that firstname is Jhon, lastname is Donovan \r",
									"pm.test(\"Check that first and last names are correct\", () => {\r",
									"    const responseObject = pm.response.json();\r",
									"\r",
									"    pm.expect(responseObject).to.be.an('object');\r",
									"    pm.expect(responseObject.firstname).to.eq(\"Jhon\");\r",
									"    pm.expect(responseObject.lastname).to.eq(\"Donovan\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/actors/36",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actors",
								"36"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check updated actor exists in get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// We get 200\r",
									"pm.test(\"Return 200\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/actors",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actors"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Movie Functionality",
			"item": [
				{
					"name": "Cannot create movie without an associated actor",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Running man\",\r\n    \"creationDate\": \"1981-05-23\",\r\n    \"actorId\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/movies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create movie successfull call",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Over top\",\r\n    \"creationDate\": \"1991-10-09\",\r\n    \"actorId\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/movies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check created movie exists in get by id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/movies/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movies",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check created movie exists in get all",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/movies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movies"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete Movie Functionality",
			"item": [
				{
					"name": "Delete movie which does exists return 404",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/movies/100",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movies",
								"100"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create movie for further delete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Game over\",\r\n    \"creationDate\": \"1981-10-09\",\r\n    \"actorId\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/movies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete movie which does exists return 404",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 5,\r\n    \"title\": \"Game over\",\r\n    \"creationdate\": \"1981-10-08T21:00:00.000Z\",\r\n    \"actorid\": 5,\r\n    \"created_at\": \"2024-09-12T12:15:58.571Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/movies/5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movies",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check deleted movie does not exists in get by id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/movies/5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movies",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check deleted movie does not exists in get all",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/movies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movies"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update Movie Functionality",
			"item": [
				{
					"name": "Updating movie which does exists return 404",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/movies/100",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movies",
								"100"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create movie for further update",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Junior\",\r\n    \"creationDate\": \"1991-10-09\",\r\n    \"actorId\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/movies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Updating movie which does exists",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Junior\",\r\n    \"creationDate\": \"1980-10-09\",\r\n    \"actorId\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/movies/6",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movies",
								"6"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check updated movie exists in get by id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/movies/6",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movies",
								"6"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check updated movie exists in get all",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/movies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movies"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "actorId",
			"value": "5",
			"type": "string"
		}
	]
}